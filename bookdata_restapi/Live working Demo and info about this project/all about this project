-----------------------------------------------------------------------------------------------
                    ONLINE BOOK STORE RESTFUL API - BOOKCART
-----------------------------------------------------------------------------------------------
Project Name : BookData_restAPI for the online BookStores
Project aim : This API helps to fatch data and also performed CRUD operations to make our
              website/apps updated with the correct DataSets.
-----------------------------------------------------------------------------------------------
                                How this API works ? 
Web requests and URLs which helps to perform Get/Post/Put/Delete [CRUD operations] --

1. Create [Post] : 
    -> 'localhost:7676/books/addbook', it helps to Create new Books dataset in our database.
    Note ~ If you will enter wrong URL or RequestBody, Than it will handle the exception and
           revert the error BAD_REQUEST.

2. Retrieve [Get] : 
    -> 'localhost:7676/books', it helps to retrieve datasets of books from our database.
    -> 'localhost:7676/books/{id}', it is a Dynamic request, helps to retrieve dataset
        of a spacific book of the passed Id from our database.

3. Update [Put] :
    -> 'localhost:7676/books/{id}', it is also a Dynamic request, helps to update the already 
        existing datasets in our database, if the dataset is not available in out database than
        the code will handle the exception and return the response error of 'NOT_FOUND'.

4. Delete [Delete] :
    -> 'localhost:7676/books/{id}', it is also a Dynamic request, helps to Delete the already 
        existing datasets in our database, if the dataset is not available in out database than
        the code will handle the exception and return the response error of 'NO_CONTENT'.
-----------------------------------------------------------------------------------------------
                                    Key Learnings:
1. How the Things are actually working in Backend.
2. Familiar with SpringBoot-Architectural Layers and how they are working together to get the
   data from database to the end user.
3. How we can connect our API with our Database with the help of JPA and perform the CRUDs on 
   your API.
4. Get familiar with the CRUD methonds of JPA repo and Database configrations.
5. How we can test/cheack the working of our backend service/APIs with 'POSTMAN TOOL'
6. More clearity in core Java concepts.
-----------------------------------------------------------------------------------------------
                            Used Tools and other Services: 
1. Postman API tool to get the reponses.
2. MySQL server and Interaction with database through terminal.
3. VS code to manage this project
4. Git(github) to upload this source Code
5. No frontend written yet for this API.
-----------------------------------------------------------------------------------------------